@page "/modes"

<MudText Typo="Typo.h3">Modes</MudText>
<MudText Typo="Typo.h6">Select a root note, then select one of the seven modes.</MudText>
<br />
<MudDivider/>
@*
<MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" FullWidth="true">
    <MudButton @OnClick="buttonClicked()" @bind-Value="_selectedNote">A</MudButton>
    <MudButton>A#/Bb</MudButton>
    <MudButton>B</MudButton>
    <MudButton>C</MudButton>
    <MudButton>C#/Db</MudButton>
    <MudButton>D</MudButton>
    <MudButton>D#/Eb</MudButton>
    <MudButton>E</MudButton>
    <MudButton>F</MudButton>
    <MudButton>F#/Gb</MudButton>
    <MudButton>G</MudButton>
    <MudButton>G#/Ab</MudButton>
</MudButtonGroup>
<MudButtonGroup Color="Color.Tertiary" Variant="Variant.Outlined" FullWidth="true">
    <MudButton @OnClick="calculateNotes()" @bind-Value="_selectedMode">Ionian</MudButton>
    <MudButton>Dorian</MudButton>
    <MudButton>Phrygian</MudButton>
    <MudButton>Lydian</MudButton>
    <MudButton>Mixolydian</MudButton>
    <MudButton>Aeolian</MudButton>
    <MudButton>Locrian</MudButton>
</MudButtonGroup>*@

<MudToggleGroup T="string" @bind-Value="_selectedNote" Rounded="false" Outlined="true" Ripple="true" SelectionMode="SelectionMode.SingleSelection" Width="auto">
    <MudToggleItem Value="@("A")"></MudToggleItem>
    <MudToggleItem Value="@("A#/Bb")"></MudToggleItem>
    <MudToggleItem Value="@("B")"></MudToggleItem>
    <MudToggleItem Value="@("C")"></MudToggleItem>
    <MudToggleItem Value="@("C#/Db")"></MudToggleItem>
    <MudToggleItem Value="@("D")"></MudToggleItem>
    <MudToggleItem Value="@("D#/Eb")"></MudToggleItem>
    <MudToggleItem Value="@("E")"></MudToggleItem>
    <MudToggleItem Value="@("F")"></MudToggleItem>
    <MudToggleItem Value="@("F#/Gb")"></MudToggleItem>
    <MudToggleItem Value="@("G")"></MudToggleItem>
    <MudToggleItem Value="@("G#/Ab")"></MudToggleItem>
</MudToggleGroup>
<br />
<MudToggleGroup T="string" @bind-Value="_selectedMode" Rounded="false" Outlined="true" Ripple="true" SelectionMode="SelectionMode.SingleSelection" Width="auto" Color="Color.Tertiary">
    <MudToggleItem Value="@("Ionian")" @onselect="()=>calcIonian()"></MudToggleItem>
    <MudToggleItem Value="@("Dorian")"></MudToggleItem>
    <MudToggleItem Value="@("Phrygian")"></MudToggleItem>
    <MudToggleItem Value="@("Lydian")"></MudToggleItem>
    <MudToggleItem Value="@("Mixolydian")"></MudToggleItem>
    <MudToggleItem Value="@("Aeolian")"></MudToggleItem>
    <MudToggleItem Value="@("Locrian")"></MudToggleItem>
</MudToggleGroup>

<br />
<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h4" Align="Align.Center">
            @_selectedNote @_selectedMode
        </MudText>
        <br />
        <MudText Typo="Typo.h4" Align="Align.Center">
            @_note1 @_note2 @_note3 @_note4 @_note5 @_note6 @_note7
        </MudText>
    </MudCardContent>
</MudCard>

@code {
    private string _selectedMode = "";
    private string _selectedNote = "";
    private string _note1 = "";
    private string _note2 = "";
    private string _note3 = "";
    private string _note4 = "";
    private string _note5 = "";
    private string _note6 = "";
    private string _note7 = "";

    List<string> notes = new List<string>() { "C", "C#/Db", "D", "D#/Eb", "E", "F", "F#/Gb", "G", "G#/Ab", "A", "A#/Bb", "B", "C", "C#/Db", "D", "D#/Eb", "E", "F", "F#/Gb", "G", "G#/Ab", "A", "A#/Bb", "B" };

    List<int> ionianIntervals = new List<int>() { 0, 2, 4, 5, 7, 9, 11 };
    List<int> dorianIntervals = new List<int>() { 0, 2, 3, 5, 7, 9, 10 };
    List<int> phrygianIntervals = new List<int>() { 0, 1, 3, 5, 7, 8, 10 };
    List<int> lydianIntervals = new List<int>() { 0, 2, 4, 6, 7, 9, 11 };
    List<int> mixolydianIntervals = new List<int>() { 0, 2, 4, 5, 7, 9, 10 };
    List<int> aeolianIntervals = new List<int>() { 0, 2, 3, 5, 7, 8, 10 };
    List<int> locrianIntervals = new List<int>() { 0, 1, 3, 5, 6, 8, 10 };

    private void calcIonian()
    {

        List<string> finalNotes = new List<string>() { _note1, _note2, _note3, _note4, _note5, _note6, _note7 };
        int selectedIndex = notes.IndexOf(_selectedNote);

        _note1 = notes[selectedIndex + ionianIntervals[0]].ToString();
        _note2 = notes[selectedIndex + ionianIntervals[1]].ToString();
        _note3 = notes[selectedIndex + ionianIntervals[2]].ToString();
        _note4 = notes[selectedIndex + ionianIntervals[3]].ToString();
        _note5 = notes[selectedIndex + ionianIntervals[4]].ToString();
        _note6 = notes[selectedIndex + ionianIntervals[5]].ToString();
        _note7 = notes[selectedIndex + ionianIntervals[6]].ToString();
        
    }
}